#include<iostream>
using namespace std;

Rules for Binary Heap
- Its a complete tree. -> So can use an array
- Either a max-heap or min-heap. 


class BinaryHeap{
    public:
    // Pointer to array of elements
    int * hArr;
    // Maximum possible size of array
    int mSize;
    // Current size of array 
    int cSize;

    BinaryHeap(int mSize){
        hArr = new int[mSize];
        this->mSize = mSize;
        cSize = 0;
    }

    void swap(int *a, int *b){
        int temp = *a; 
        *a = *b; 
        *b = temp;
    }

    int parent(int i){ return (i-1)/2;}
    int left(int i){ return (i*2)+1;}
    int right(int i){ return (i*2)+2;}

    int getMin(){ return hArr[0]; }

    void insert(int value){
        // Base case. 
        if(cSize == mSize){
            cout << "Heap Overflow";
            return;
        }
        // Insert the new key at the end.
        int i = cSize++;
        hArr[i] = value;

        //Check if it breaks the heap property and fix it. 
        //Check it for all hierarchy 
        while (i != 0 && hArr[parent(i)] > hArr[i]) 
        { 
            swap(&hArr[i], &hArr[parent(i)]); 
            i = parent(i); 
        }

    }
    void display(){
        for(int i = 0; i < cSize ; i++){
            cout << hArr[i] << ",";
        }
        cout << endl;
    }

    int extractMin() 
    { 
        if (cSize <= 0) 
            return INT_MAX; 
        if (cSize == 1) 
        { 
            cSize--; 
            return hArr[0]; 
        } 
    
        // Store the minimum value, and remove it from heap 
        int root = hArr[0]; 
        hArr[0] = hArr[cSize-1]; 
        cSize--; 
        MinHeapify(0); 
    
        return root; 
    }

    void decreaseKey(int i, int new_val) 
    { 
        // Algorithm for what happens when I reduce the value of an element indexed at i to new_val. You can assume new_val to be less than the present value of the element. 
        hArr[i] = new_val; 
        while (i != 0 && hArr[parent(i)] > hArr[i]) 
        { 
            swap(&hArr[i], &hArr[parent(i)]); 
            i = parent(i); 
        } 
    } 
    void deleteKeyAt(int i) 
    { 
        // Decrease the value to INT_MIN 
        decreaseKey(i, INT_MIN); 
        // Call ExtractMin
        extractMin(); 
    }

    void MinHeapify(int i) 
    { 
        int l = left(i); 
        int r = right(i); 
        int smallest = i; 
        if (l < cSize && hArr[l] < hArr[i]) 
            smallest = l; 
        if (r < cSize && hArr[r] < hArr[smallest]) 
            smallest = r; 
        if (smallest != i) 
        { 
            swap(&hArr[i], &hArr[smallest]); 
            MinHeapify(smallest); 
        } 
    } 

};


int main(){
    BinaryHeap bh1(20);
    for(int i = 10; i >0 ; i--){
        cout << "Inserting " << i << endl;
        bh1.insert(i);
        bh1.display();
    }
    bh1.extractMin();
    bh1.display();
    bh1.deleteKeyAt(3);
    bh1.display();
    cout << endl;
}
